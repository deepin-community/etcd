From: Shengjing Zhu <zhsj@debian.org>
Date: Sun, 1 Jan 2023 19:13:41 +0800
Subject: grpc 1.32 naming

clientv3/naming is copied from release-3.5

proxy/grpcproxy is based https://github.com/etcd-io/etcd/pull/12675
---
 clientv3/client.go                           |  13 +-
 clientv3/naming/doc.go                       |  33 ++---
 clientv3/naming/endpoints/endpoints.go       |  82 +++++++++++++
 clientv3/naming/endpoints/endpoints_impl.go  | 175 +++++++++++++++++++++++++++
 clientv3/naming/endpoints/internal/update.go |  38 ++++++
 clientv3/naming/grpc.go                      | 133 --------------------
 clientv3/naming/grpc_test.go                 | 139 ---------------------
 clientv3/naming/resolver/resolver.go         | 107 ++++++++++++++++
 proxy/grpcproxy/cluster.go                   |  66 +++++-----
 proxy/grpcproxy/register.go                  |  11 +-
 proxy/grpcproxy/register_test.go             |  33 ++---
 11 files changed, 487 insertions(+), 343 deletions(-)
 create mode 100644 clientv3/naming/endpoints/endpoints.go
 create mode 100644 clientv3/naming/endpoints/endpoints_impl.go
 create mode 100644 clientv3/naming/endpoints/internal/update.go
 delete mode 100644 clientv3/naming/grpc.go
 delete mode 100644 clientv3/naming/grpc_test.go
 create mode 100644 clientv3/naming/resolver/resolver.go

diff --git a/clientv3/client.go b/clientv3/client.go
index e2003bc..156ed50 100644
--- a/clientv3/client.go
+++ b/clientv3/client.go
@@ -95,7 +95,8 @@ type Client struct {
 
 	callOpts []grpc.CallOption
 
-	lg *zap.Logger
+	lg   *zap.Logger
+	lgMu *sync.RWMutex
 }
 
 // New creates a new etcdv3 client from a given configuration.
@@ -125,6 +126,15 @@ func NewFromURLs(urls []string) (*Client, error) {
 	return New(Config{Endpoints: urls})
 }
 
+// GetLogger gets the logger.
+// NOTE: This method is for internal use of etcd-client library and should not be used as general-purpose logger.
+func (c *Client) GetLogger() *zap.Logger {
+	c.lgMu.RLock()
+	l := c.lg
+	c.lgMu.RUnlock()
+	return l
+}
+
 // Close shuts down the client's etcd connections.
 func (c *Client) Close() error {
 	c.cancel()
@@ -422,6 +432,7 @@ func newClient(cfg *Config) (*Client, error) {
 		cancel:   cancel,
 		mu:       new(sync.RWMutex),
 		callOpts: defaultCallOpts,
+		lgMu:     new(sync.RWMutex),
 	}
 
 	lcfg := logutil.DefaultZapLoggerConfig
diff --git a/clientv3/naming/doc.go b/clientv3/naming/doc.go
index b55cc49..55130fa 100644
--- a/clientv3/naming/doc.go
+++ b/clientv3/naming/doc.go
@@ -12,45 +12,48 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
-// Package naming provides an etcd-backed gRPC resolver for discovering gRPC services.
+// Package naming provides:
+//	- subpackage endpoints: an abstraction layer to store and read endpoints
+//		information from etcd.
+//	- subpackage resolver: an etcd-backed gRPC resolver for discovering gRPC
+//		services based on the endpoints configuration
 //
 // To use, first import the packages:
 //
 //	import (
-//		"go.etcd.io/etcd/clientv3"
-//		etcdnaming "go.etcd.io/etcd/clientv3/naming"
-//
+//		"go.etcd.io/etcd/client/v3"
+//		"go.etcd.io/etcd/client/v3/naming/endpoints"
+//		"go.etcd.io/etcd/client/v3/naming/resolver"
 //		"google.golang.org/grpc"
-//		"google.golang.org/grpc/naming"
 //	)
 //
 // First, register new endpoint addresses for a service:
 //
 //	func etcdAdd(c *clientv3.Client, service, addr string) error {
-//		r := &etcdnaming.GRPCResolver{Client: c}
-//		return r.Update(c.Ctx(), service, naming.Update{Op: naming.Add, Addr: addr})
+//		em := endpoints.NewManager(c, service)
+//		return em.AddEndpoint(c.Ctx(), service+"/"+addr, endpoints.Endpoint{Addr:addr});
 //	}
 //
 // Dial an RPC service using the etcd gRPC resolver and a gRPC Balancer:
 //
 //	func etcdDial(c *clientv3.Client, service string) (*grpc.ClientConn, error) {
-//		r := &etcdnaming.GRPCResolver{Client: c}
-//		b := grpc.RoundRobin(r)
-//		return grpc.Dial(service, grpc.WithBalancer(b))
+//		etcdResolver, err := resolver.NewBuilder(c);
+//		if err { return nil, err }
+//		return  grpc.Dial("etcd:///" + service, grpc.WithResolvers(etcdResolver))
 //	}
 //
 // Optionally, force delete an endpoint:
 //
 //	func etcdDelete(c *clientv3, service, addr string) error {
-//		r := &etcdnaming.GRPCResolver{Client: c}
-//		return r.Update(c.Ctx(), service, naming.Update{Op: naming.Delete, Addr: "1.2.3.4"})
+//		em := endpoints.NewManager(c, service)
+//		return em.DeleteEndpoint(c.Ctx(), service+"/"+addr)
 //	}
 //
 // Or register an expiring endpoint with a lease:
 //
-//	func etcdLeaseAdd(c *clientv3.Client, lid clientv3.LeaseID, service, addr string) error {
-//		r := &etcdnaming.GRPCResolver{Client: c}
-//		return r.Update(c.Ctx(), service, naming.Update{Op: naming.Add, Addr: addr}, clientv3.WithLease(lid))
+//	func etcdAdd(c *clientv3.Client, lid clientv3.LeaseID, service, addr string) error {
+//		em := endpoints.NewManager(c, service)
+//		return em.AddEndpoint(c.Ctx(), service+"/"+addr, endpoints.Endpoint{Addr:addr}, clientv3.WithLease(lid));
 //	}
 //
 package naming
diff --git a/clientv3/naming/endpoints/endpoints.go b/clientv3/naming/endpoints/endpoints.go
new file mode 100644
index 0000000..f04651a
--- /dev/null
+++ b/clientv3/naming/endpoints/endpoints.go
@@ -0,0 +1,82 @@
+package endpoints
+
+import (
+	"context"
+
+	clientv3 "go.etcd.io/etcd/clientv3"
+)
+
+// Endpoint represents a single address the connection can be established with.
+//
+// Inspired by: https://pkg.go.dev/google.golang.org/grpc/resolver#Address.
+// Please document etcd version since which version each field is supported.
+type Endpoint struct {
+	// Addr is the server address on which a connection will be established.
+	// Since etcd 3.1
+	Addr string
+
+	// Metadata is the information associated with Addr, which may be used
+	// to make load balancing decision.
+	// Since etcd 3.1
+	Metadata interface{}
+}
+
+type Operation uint8
+
+const (
+	// Add indicates an Endpoint is added.
+	Add Operation = iota
+	// Delete indicates an existing address is deleted.
+	Delete
+)
+
+// Update describes a single edit action of an Endpoint.
+type Update struct {
+	// Op - action Add or Delete.
+	Op       Operation
+	Key      string
+	Endpoint Endpoint
+}
+
+// WatchChannel is used to deliver notifications about endpoints updates.
+type WatchChannel <-chan []*Update
+
+// Key2EndpointMap maps etcd key into struct describing the endpoint.
+type Key2EndpointMap map[string]Endpoint
+
+// UpdateWithOpts describes endpoint update (add or delete) together
+// with etcd options (e.g. to attach an endpoint to a lease).
+type UpdateWithOpts struct {
+	Update
+	Opts []clientv3.OpOption
+}
+
+// NewAddUpdateOpts constructs UpdateWithOpts for endpoint registration.
+func NewAddUpdateOpts(key string, endpoint Endpoint, opts ...clientv3.OpOption) *UpdateWithOpts {
+	return &UpdateWithOpts{Update: Update{Op: Add, Key: key, Endpoint: endpoint}, Opts: opts}
+}
+
+// NewDeleteUpdateOpts constructs UpdateWithOpts for endpoint deletion.
+func NewDeleteUpdateOpts(key string, opts ...clientv3.OpOption) *UpdateWithOpts {
+	return &UpdateWithOpts{Update: Update{Op: Delete, Key: key}, Opts: opts}
+}
+
+// Manager can be used to add/remove & inspect endpoints stored in etcd for
+// a particular target.
+type Manager interface {
+	// Update allows to atomically add/remove a few endpoints from etcd.
+	Update(ctx context.Context, updates []*UpdateWithOpts) error
+
+	// AddEndpoint registers a single endpoint in etcd.
+	// For more advanced use-cases use the Update method.
+	AddEndpoint(ctx context.Context, key string, endpoint Endpoint, opts ...clientv3.OpOption) error
+	// DeleteEndpoint deletes a single endpoint stored in etcd.
+	// For more advanced use-cases use the Update method.
+	DeleteEndpoint(ctx context.Context, key string, opts ...clientv3.OpOption) error
+
+	// List returns all the endpoints for the current target as a map.
+	List(ctx context.Context) (Key2EndpointMap, error)
+	// NewWatchChannel creates a channel that populates or endpoint updates.
+	// Cancel the 'ctx' to close the watcher.
+	NewWatchChannel(ctx context.Context) (WatchChannel, error)
+}
diff --git a/clientv3/naming/endpoints/endpoints_impl.go b/clientv3/naming/endpoints/endpoints_impl.go
new file mode 100644
index 0000000..ce6609e
--- /dev/null
+++ b/clientv3/naming/endpoints/endpoints_impl.go
@@ -0,0 +1,175 @@
+package endpoints
+
+// TODO: The API is not yet implemented.
+
+import (
+	"context"
+	"encoding/json"
+	"errors"
+	"strings"
+
+	clientv3 "go.etcd.io/etcd/clientv3"
+	"go.etcd.io/etcd/clientv3/naming/endpoints/internal"
+
+	"go.uber.org/zap"
+	"google.golang.org/grpc/codes"
+	"google.golang.org/grpc/status"
+)
+
+type endpointManager struct {
+	// Client is an initialized etcd client.
+	client *clientv3.Client
+	target string
+}
+
+// NewManager creates an endpoint manager which implements the interface of 'Manager'.
+func NewManager(client *clientv3.Client, target string) (Manager, error) {
+	if client == nil {
+		return nil, errors.New("invalid etcd client")
+	}
+
+	if target == "" {
+		return nil, errors.New("invalid target")
+	}
+
+	em := &endpointManager{
+		client: client,
+		target: target,
+	}
+	return em, nil
+}
+
+func (m *endpointManager) Update(ctx context.Context, updates []*UpdateWithOpts) (err error) {
+	ops := make([]clientv3.Op, 0, len(updates))
+	for _, update := range updates {
+		if !strings.HasPrefix(update.Key, m.target+"/") {
+			return status.Errorf(codes.InvalidArgument, "endpoints: endpoint key should be prefixed with '%s/' got: '%s'", m.target, update.Key)
+		}
+
+		switch update.Op {
+		case Add:
+			internalUpdate := &internal.Update{
+				Op:       internal.Add,
+				Addr:     update.Endpoint.Addr,
+				Metadata: update.Endpoint.Metadata,
+			}
+
+			var v []byte
+			if v, err = json.Marshal(internalUpdate); err != nil {
+				return status.Error(codes.InvalidArgument, err.Error())
+			}
+			ops = append(ops, clientv3.OpPut(update.Key, string(v), update.Opts...))
+		case Delete:
+			ops = append(ops, clientv3.OpDelete(update.Key, update.Opts...))
+		default:
+			return status.Error(codes.InvalidArgument, "endpoints: bad update op")
+		}
+	}
+	_, err = m.client.KV.Txn(ctx).Then(ops...).Commit()
+	return err
+}
+
+func (m *endpointManager) AddEndpoint(ctx context.Context, key string, endpoint Endpoint, opts ...clientv3.OpOption) error {
+	return m.Update(ctx, []*UpdateWithOpts{NewAddUpdateOpts(key, endpoint, opts...)})
+}
+
+func (m *endpointManager) DeleteEndpoint(ctx context.Context, key string, opts ...clientv3.OpOption) error {
+	return m.Update(ctx, []*UpdateWithOpts{NewDeleteUpdateOpts(key, opts...)})
+}
+
+func (m *endpointManager) NewWatchChannel(ctx context.Context) (WatchChannel, error) {
+	resp, err := m.client.Get(ctx, m.target, clientv3.WithPrefix(), clientv3.WithSerializable())
+	if err != nil {
+		return nil, err
+	}
+
+	lg := m.client.GetLogger()
+	initUpdates := make([]*Update, 0, len(resp.Kvs))
+	for _, kv := range resp.Kvs {
+		var iup internal.Update
+		if err := json.Unmarshal(kv.Value, &iup); err != nil {
+			lg.Warn("unmarshal endpoint update failed", zap.String("key", string(kv.Key)), zap.Error(err))
+			continue
+		}
+		up := &Update{
+			Op:       Add,
+			Key:      string(kv.Key),
+			Endpoint: Endpoint{Addr: iup.Addr, Metadata: iup.Metadata},
+		}
+		initUpdates = append(initUpdates, up)
+	}
+
+	upch := make(chan []*Update, 1)
+	if len(initUpdates) > 0 {
+		upch <- initUpdates
+	}
+	go m.watch(ctx, resp.Header.Revision+1, upch)
+	return upch, nil
+}
+
+func (m *endpointManager) watch(ctx context.Context, rev int64, upch chan []*Update) {
+	defer close(upch)
+
+	lg := m.client.GetLogger()
+	opts := []clientv3.OpOption{clientv3.WithRev(rev), clientv3.WithPrefix()}
+	wch := m.client.Watch(ctx, m.target, opts...)
+	for {
+		select {
+		case <-ctx.Done():
+			return
+		case wresp, ok := <-wch:
+			if !ok {
+				lg.Warn("watch closed", zap.String("target", m.target))
+				return
+			}
+			if wresp.Err() != nil {
+				lg.Warn("watch failed", zap.String("target", m.target), zap.Error(wresp.Err()))
+				return
+			}
+
+			deltaUps := make([]*Update, 0, len(wresp.Events))
+			for _, e := range wresp.Events {
+				var iup internal.Update
+				var err error
+				var op Operation
+				switch e.Type {
+				case clientv3.EventTypePut:
+					err = json.Unmarshal(e.Kv.Value, &iup)
+					op = Add
+					if err != nil {
+						lg.Warn("unmarshal endpoint update failed", zap.String("key", string(e.Kv.Key)), zap.Error(err))
+						continue
+					}
+				case clientv3.EventTypeDelete:
+					iup = internal.Update{Op: internal.Delete}
+					op = Delete
+				default:
+					continue
+				}
+				up := &Update{Op: op, Key: string(e.Kv.Key), Endpoint: Endpoint{Addr: iup.Addr, Metadata: iup.Metadata}}
+				deltaUps = append(deltaUps, up)
+			}
+			if len(deltaUps) > 0 {
+				upch <- deltaUps
+			}
+		}
+	}
+}
+
+func (m *endpointManager) List(ctx context.Context) (Key2EndpointMap, error) {
+	resp, err := m.client.Get(ctx, m.target, clientv3.WithPrefix(), clientv3.WithSerializable())
+	if err != nil {
+		return nil, err
+	}
+
+	eps := make(Key2EndpointMap)
+	for _, kv := range resp.Kvs {
+		var iup internal.Update
+		if err := json.Unmarshal(kv.Value, &iup); err != nil {
+			continue
+		}
+
+		eps[string(kv.Key)] = Endpoint{Addr: iup.Addr, Metadata: iup.Metadata}
+	}
+	return eps, nil
+}
diff --git a/clientv3/naming/endpoints/internal/update.go b/clientv3/naming/endpoints/internal/update.go
new file mode 100644
index 0000000..71aa83f
--- /dev/null
+++ b/clientv3/naming/endpoints/internal/update.go
@@ -0,0 +1,38 @@
+package internal
+
+// Operation describes action performed on endpoint (addition vs deletion).
+// Must stay JSON-format compatible with:
+// https://pkg.go.dev/google.golang.org/grpc@v1.29.1/naming#Operation
+type Operation uint8
+
+const (
+	// Add indicates a new address is added.
+	Add Operation = iota
+	// Delete indicates an existing address is deleted.
+	Delete
+)
+
+// Update defines a persistent (JSON marshalled) format representing
+// endpoint within the etcd storage.
+//
+// As the format can be persisted by one version of etcd client library and
+// read by other the format must be kept backward compatible and
+// in particular must be superset of the grpc(<=1.29.1) naming.Update structure:
+// https://pkg.go.dev/google.golang.org/grpc@v1.29.1/naming#Update
+//
+// Please document since which version of etcd-client given property is supported.
+// Please keep the naming consistent with e.g. https://pkg.go.dev/google.golang.org/grpc/resolver#Address.
+//
+// Notice that it is not valid having both empty string Addr and nil Metadata in an Update.
+type Update struct {
+	// Op indicates the operation of the update.
+	// Since etcd 3.1.
+	Op Operation
+	// Addr is the updated address. It is empty string if there is no address update.
+	// Since etcd 3.1.
+	Addr string
+	// Metadata is the updated metadata. It is nil if there is no metadata update.
+	// Metadata is not required for a custom naming implementation.
+	// Since etcd 3.1.
+	Metadata interface{}
+}
diff --git a/clientv3/naming/grpc.go b/clientv3/naming/grpc.go
deleted file mode 100644
index 7eed84b..0000000
--- a/clientv3/naming/grpc.go
+++ /dev/null
@@ -1,133 +0,0 @@
-// Copyright 2016 The etcd Authors
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-package naming
-
-import (
-	"context"
-	"encoding/json"
-	"fmt"
-
-	etcd "go.etcd.io/etcd/clientv3"
-
-	"google.golang.org/grpc/codes"
-	"google.golang.org/grpc/naming"
-	"google.golang.org/grpc/status"
-)
-
-var ErrWatcherClosed = fmt.Errorf("naming: watch closed")
-
-// GRPCResolver creates a grpc.Watcher for a target to track its resolution changes.
-type GRPCResolver struct {
-	// Client is an initialized etcd client.
-	Client *etcd.Client
-}
-
-func (gr *GRPCResolver) Update(ctx context.Context, target string, nm naming.Update, opts ...etcd.OpOption) (err error) {
-	switch nm.Op {
-	case naming.Add:
-		var v []byte
-		if v, err = json.Marshal(nm); err != nil {
-			return status.Error(codes.InvalidArgument, err.Error())
-		}
-		_, err = gr.Client.KV.Put(ctx, target+"/"+nm.Addr, string(v), opts...)
-	case naming.Delete:
-		_, err = gr.Client.Delete(ctx, target+"/"+nm.Addr, opts...)
-	default:
-		return status.Error(codes.InvalidArgument, "naming: bad naming op")
-	}
-	return err
-}
-
-func (gr *GRPCResolver) Resolve(target string) (naming.Watcher, error) {
-	ctx, cancel := context.WithCancel(context.Background())
-	w := &gRPCWatcher{c: gr.Client, target: target + "/", ctx: ctx, cancel: cancel}
-	return w, nil
-}
-
-type gRPCWatcher struct {
-	c      *etcd.Client
-	target string
-	ctx    context.Context
-	cancel context.CancelFunc
-	wch    etcd.WatchChan
-	err    error
-}
-
-// Next gets the next set of updates from the etcd resolver.
-// Calls to Next should be serialized; concurrent calls are not safe since
-// there is no way to reconcile the update ordering.
-func (gw *gRPCWatcher) Next() ([]*naming.Update, error) {
-	if gw.wch == nil {
-		// first Next() returns all addresses
-		return gw.firstNext()
-	}
-	if gw.err != nil {
-		return nil, gw.err
-	}
-
-	// process new events on target/*
-	wr, ok := <-gw.wch
-	if !ok {
-		gw.err = status.Error(codes.Unavailable, ErrWatcherClosed.Error())
-		return nil, gw.err
-	}
-	if gw.err = wr.Err(); gw.err != nil {
-		return nil, gw.err
-	}
-
-	updates := make([]*naming.Update, 0, len(wr.Events))
-	for _, e := range wr.Events {
-		var jupdate naming.Update
-		var err error
-		switch e.Type {
-		case etcd.EventTypePut:
-			err = json.Unmarshal(e.Kv.Value, &jupdate)
-			jupdate.Op = naming.Add
-		case etcd.EventTypeDelete:
-			err = json.Unmarshal(e.PrevKv.Value, &jupdate)
-			jupdate.Op = naming.Delete
-		default:
-			continue
-		}
-		if err == nil {
-			updates = append(updates, &jupdate)
-		}
-	}
-	return updates, nil
-}
-
-func (gw *gRPCWatcher) firstNext() ([]*naming.Update, error) {
-	// Use serialized request so resolution still works if the target etcd
-	// server is partitioned away from the quorum.
-	resp, err := gw.c.Get(gw.ctx, gw.target, etcd.WithPrefix(), etcd.WithSerializable())
-	if gw.err = err; err != nil {
-		return nil, err
-	}
-
-	updates := make([]*naming.Update, 0, len(resp.Kvs))
-	for _, kv := range resp.Kvs {
-		var jupdate naming.Update
-		if err := json.Unmarshal(kv.Value, &jupdate); err != nil {
-			continue
-		}
-		updates = append(updates, &jupdate)
-	}
-
-	opts := []etcd.OpOption{etcd.WithRev(resp.Header.Revision + 1), etcd.WithPrefix(), etcd.WithPrevKV()}
-	gw.wch = gw.c.Watch(gw.ctx, gw.target, opts...)
-	return updates, nil
-}
-
-func (gw *gRPCWatcher) Close() { gw.cancel() }
diff --git a/clientv3/naming/grpc_test.go b/clientv3/naming/grpc_test.go
deleted file mode 100644
index 0041a89..0000000
--- a/clientv3/naming/grpc_test.go
+++ /dev/null
@@ -1,139 +0,0 @@
-// Copyright 2016 The etcd Authors
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-package naming_test
-
-import (
-	"context"
-	"encoding/json"
-	"reflect"
-	"testing"
-
-	etcd "go.etcd.io/etcd/clientv3"
-	namingv3 "go.etcd.io/etcd/clientv3/naming"
-	"go.etcd.io/etcd/integration"
-	"go.etcd.io/etcd/pkg/testutil"
-
-	"google.golang.org/grpc/naming"
-)
-
-func TestGRPCResolver(t *testing.T) {
-	defer testutil.AfterTest(t)
-
-	clus := integration.NewClusterV3(t, &integration.ClusterConfig{Size: 1})
-	defer clus.Terminate(t)
-
-	r := namingv3.GRPCResolver{
-		Client: clus.RandClient(),
-	}
-
-	w, err := r.Resolve("foo")
-	if err != nil {
-		t.Fatal("failed to resolve foo", err)
-	}
-	defer w.Close()
-
-	addOp := naming.Update{Op: naming.Add, Addr: "127.0.0.1", Metadata: "metadata"}
-	err = r.Update(context.TODO(), "foo", addOp)
-	if err != nil {
-		t.Fatal("failed to add foo", err)
-	}
-
-	us, err := w.Next()
-	if err != nil {
-		t.Fatal("failed to get udpate", err)
-	}
-
-	wu := &naming.Update{
-		Op:       naming.Add,
-		Addr:     "127.0.0.1",
-		Metadata: "metadata",
-	}
-
-	if !reflect.DeepEqual(us[0], wu) {
-		t.Fatalf("up = %#v, want %#v", us[0], wu)
-	}
-
-	delOp := naming.Update{Op: naming.Delete, Addr: "127.0.0.1"}
-	err = r.Update(context.TODO(), "foo", delOp)
-	if err != nil {
-		t.Fatalf("failed to udpate %v", err)
-	}
-
-	us, err = w.Next()
-	if err != nil {
-		t.Fatalf("failed to get udpate %v", err)
-	}
-
-	wu = &naming.Update{
-		Op:       naming.Delete,
-		Addr:     "127.0.0.1",
-		Metadata: "metadata",
-	}
-
-	if !reflect.DeepEqual(us[0], wu) {
-		t.Fatalf("up = %#v, want %#v", us[0], wu)
-	}
-}
-
-// TestGRPCResolverMulti ensures the resolver will initialize
-// correctly with multiple hosts and correctly receive multiple
-// updates in a single revision.
-func TestGRPCResolverMulti(t *testing.T) {
-	defer testutil.AfterTest(t)
-
-	clus := integration.NewClusterV3(t, &integration.ClusterConfig{Size: 1})
-	defer clus.Terminate(t)
-	c := clus.RandClient()
-
-	v, verr := json.Marshal(naming.Update{Addr: "127.0.0.1", Metadata: "md"})
-	if verr != nil {
-		t.Fatal(verr)
-	}
-	if _, err := c.Put(context.TODO(), "foo/host", string(v)); err != nil {
-		t.Fatal(err)
-	}
-	if _, err := c.Put(context.TODO(), "foo/host2", string(v)); err != nil {
-		t.Fatal(err)
-	}
-
-	r := namingv3.GRPCResolver{c}
-
-	w, err := r.Resolve("foo")
-	if err != nil {
-		t.Fatal("failed to resolve foo", err)
-	}
-	defer w.Close()
-
-	updates, nerr := w.Next()
-	if nerr != nil {
-		t.Fatal(nerr)
-	}
-	if len(updates) != 2 {
-		t.Fatalf("expected two updates, got %+v", updates)
-	}
-
-	_, err = c.Txn(context.TODO()).Then(etcd.OpDelete("foo/host"), etcd.OpDelete("foo/host2")).Commit()
-	if err != nil {
-		t.Fatal(err)
-	}
-
-	updates, nerr = w.Next()
-	if nerr != nil {
-		t.Fatal(nerr)
-	}
-	if len(updates) != 2 || (updates[0].Op != naming.Delete && updates[1].Op != naming.Delete) {
-		t.Fatalf("expected two updates, got %+v", updates)
-	}
-}
diff --git a/clientv3/naming/resolver/resolver.go b/clientv3/naming/resolver/resolver.go
new file mode 100644
index 0000000..5fb4fb0
--- /dev/null
+++ b/clientv3/naming/resolver/resolver.go
@@ -0,0 +1,107 @@
+package resolver
+
+import (
+	"context"
+	"sync"
+
+	clientv3 "go.etcd.io/etcd/clientv3"
+	"go.etcd.io/etcd/clientv3/naming/endpoints"
+
+	"google.golang.org/grpc/codes"
+	gresolver "google.golang.org/grpc/resolver"
+	"google.golang.org/grpc/status"
+)
+
+type builder struct {
+	c *clientv3.Client
+}
+
+func (b builder) Build(target gresolver.Target, cc gresolver.ClientConn, opts gresolver.BuildOptions) (gresolver.Resolver, error) {
+	r := &resolver{
+		c:      b.c,
+		target: target.Endpoint,
+		cc:     cc,
+	}
+	r.ctx, r.cancel = context.WithCancel(context.Background())
+
+	em, err := endpoints.NewManager(r.c, r.target)
+	if err != nil {
+		return nil, status.Errorf(codes.InvalidArgument, "resolver: failed to new endpoint manager: %s", err)
+	}
+	r.wch, err = em.NewWatchChannel(r.ctx)
+	if err != nil {
+		return nil, status.Errorf(codes.Internal, "resolver: failed to new watch channer: %s", err)
+	}
+
+	r.wg.Add(1)
+	go r.watch()
+	return r, nil
+}
+
+func (b builder) Scheme() string {
+	return "etcd"
+}
+
+// NewBuilder creates a resolver builder.
+func NewBuilder(client *clientv3.Client) (gresolver.Builder, error) {
+	return builder{c: client}, nil
+}
+
+type resolver struct {
+	c      *clientv3.Client
+	target string
+	cc     gresolver.ClientConn
+	wch    endpoints.WatchChannel
+	ctx    context.Context
+	cancel context.CancelFunc
+	wg     sync.WaitGroup
+}
+
+func (r *resolver) watch() {
+	defer r.wg.Done()
+
+	allUps := make(map[string]*endpoints.Update)
+	for {
+		select {
+		case <-r.ctx.Done():
+			return
+		case ups, ok := <-r.wch:
+			if !ok {
+				return
+			}
+
+			for _, up := range ups {
+				switch up.Op {
+				case endpoints.Add:
+					allUps[up.Key] = up
+				case endpoints.Delete:
+					delete(allUps, up.Key)
+				}
+			}
+
+			addrs := convertToGRPCAddress(allUps)
+			r.cc.UpdateState(gresolver.State{Addresses: addrs})
+		}
+	}
+}
+
+func convertToGRPCAddress(ups map[string]*endpoints.Update) []gresolver.Address {
+	var addrs []gresolver.Address
+	for _, up := range ups {
+		addr := gresolver.Address{
+			Addr:     up.Endpoint.Addr,
+			Metadata: up.Endpoint.Metadata,
+		}
+		addrs = append(addrs, addr)
+	}
+	return addrs
+}
+
+// ResolveNow is a no-op here.
+// It's just a hint, resolver can ignore this if it's not necessary.
+func (r *resolver) ResolveNow(gresolver.ResolveNowOptions) {}
+
+func (r *resolver) Close() {
+	r.cancel()
+	r.wg.Wait()
+}
diff --git a/proxy/grpcproxy/cluster.go b/proxy/grpcproxy/cluster.go
index 7e5059c..c0ddcbd 100644
--- a/proxy/grpcproxy/cluster.go
+++ b/proxy/grpcproxy/cluster.go
@@ -22,12 +22,10 @@ import (
 	"sync"
 
 	"go.etcd.io/etcd/clientv3"
-	"go.etcd.io/etcd/clientv3/naming"
-	"go.etcd.io/etcd/etcdserver/api/v3rpc/rpctypes"
+	"go.etcd.io/etcd/clientv3/naming/endpoints"
 	pb "go.etcd.io/etcd/etcdserver/etcdserverpb"
 
 	"golang.org/x/time/rate"
-	gnaming "google.golang.org/grpc/naming"
 )
 
 // allow maximum 1 retry per second
@@ -36,35 +34,45 @@ const resolveRetryRate = 1
 type clusterProxy struct {
 	clus clientv3.Cluster
 	ctx  context.Context
-	gr   *naming.GRPCResolver
 
 	// advertise client URL
 	advaddr string
 	prefix  string
 
+	em endpoints.Manager
+
 	umu  sync.RWMutex
-	umap map[string]gnaming.Update
+	umap map[string]endpoints.Endpoint
 }
 
 // NewClusterProxy takes optional prefix to fetch grpc-proxy member endpoints.
 // The returned channel is closed when there is grpc-proxy endpoint registered
 // and the client's context is canceled so the 'register' loop returns.
 func NewClusterProxy(c *clientv3.Client, advaddr string, prefix string) (pb.ClusterServer, <-chan struct{}) {
+	var em endpoints.Manager
+	if advaddr != "" && prefix != "" {
+		var err error
+		if em, err = endpoints.NewManager(c, prefix); err != nil {
+			plog.Errorf("failed to provision endpointsManager %s (%v)", prefix, err)
+			return nil, nil
+		}
+	}
+
 	cp := &clusterProxy{
 		clus: c.Cluster,
 		ctx:  c.Ctx(),
-		gr:   &naming.GRPCResolver{Client: c},
 
 		advaddr: advaddr,
 		prefix:  prefix,
-		umap:    make(map[string]gnaming.Update),
+		umap:    make(map[string]endpoints.Endpoint),
+		em:      em,
 	}
 
 	donec := make(chan struct{})
-	if advaddr != "" && prefix != "" {
+	if em != nil {
 		go func() {
 			defer close(donec)
-			cp.resolve(prefix)
+			cp.establishEndpointWatch(prefix)
 		}()
 		return cp, donec
 	}
@@ -73,38 +81,36 @@ func NewClusterProxy(c *clientv3.Client, advaddr string, prefix string) (pb.Clus
 	return cp, donec
 }
 
-func (cp *clusterProxy) resolve(prefix string) {
+func (cp *clusterProxy) establishEndpointWatch(prefix string) {
 	rm := rate.NewLimiter(rate.Limit(resolveRetryRate), resolveRetryRate)
 	for rm.Wait(cp.ctx) == nil {
-		wa, err := cp.gr.Resolve(prefix)
+		wc, err := cp.em.NewWatchChannel(cp.ctx)
 		if err != nil {
 			plog.Warningf("failed to resolve %q (%v)", prefix, err)
 			continue
 		}
-		cp.monitor(wa)
+		cp.monitor(wc)
 	}
 }
 
-func (cp *clusterProxy) monitor(wa gnaming.Watcher) {
-	for cp.ctx.Err() == nil {
-		ups, err := wa.Next()
-		if err != nil {
-			plog.Warningf("clusterProxy watcher error (%v)", err)
-			if rpctypes.ErrorDesc(err) == naming.ErrWatcherClosed.Error() {
-				return
-			}
-		}
-
-		cp.umu.Lock()
-		for i := range ups {
-			switch ups[i].Op {
-			case gnaming.Add:
-				cp.umap[ups[i].Addr] = *ups[i]
-			case gnaming.Delete:
-				delete(cp.umap, ups[i].Addr)
+func (cp *clusterProxy) monitor(wa endpoints.WatchChannel) {
+	for {
+		select {
+		case <-cp.ctx.Done():
+			plog.Infof("watching endpoints interrupted (%v)", cp.ctx.Err())
+			return
+		case updates := <-wa:
+			cp.umu.Lock()
+			for _, up := range updates {
+				switch up.Op {
+				case endpoints.Add:
+					cp.umap[up.Endpoint.Addr] = up.Endpoint
+				case endpoints.Delete:
+					delete(cp.umap, up.Endpoint.Addr)
+				}
 			}
+			cp.umu.Unlock()
 		}
-		cp.umu.Unlock()
 	}
 }
 
diff --git a/proxy/grpcproxy/register.go b/proxy/grpcproxy/register.go
index ba628c3..b02faeb 100644
--- a/proxy/grpcproxy/register.go
+++ b/proxy/grpcproxy/register.go
@@ -20,10 +20,9 @@ import (
 
 	"go.etcd.io/etcd/clientv3"
 	"go.etcd.io/etcd/clientv3/concurrency"
-	"go.etcd.io/etcd/clientv3/naming"
+	"go.etcd.io/etcd/clientv3/naming/endpoints"
 
 	"golang.org/x/time/rate"
-	gnaming "google.golang.org/grpc/naming"
 )
 
 // allow maximum 1 retry per second
@@ -67,8 +66,12 @@ func registerSession(c *clientv3.Client, prefix string, addr string, ttl int) (*
 		return nil, err
 	}
 
-	gr := &naming.GRPCResolver{Client: c}
-	if err = gr.Update(c.Ctx(), prefix, gnaming.Update{Op: gnaming.Add, Addr: addr, Metadata: getMeta()}, clientv3.WithLease(ss.Lease())); err != nil {
+	em, err := endpoints.NewManager(c, prefix)
+	if err != nil {
+		return nil, err
+	}
+	endpoint := endpoints.Endpoint{Addr: addr, Metadata: getMeta()}
+	if err = em.AddEndpoint(c.Ctx(), prefix+"/"+addr, endpoint, clientv3.WithLease(ss.Lease())); err != nil {
 		return nil, err
 	}
 
diff --git a/proxy/grpcproxy/register_test.go b/proxy/grpcproxy/register_test.go
index 33b0154..0a15bcd 100644
--- a/proxy/grpcproxy/register_test.go
+++ b/proxy/grpcproxy/register_test.go
@@ -19,11 +19,9 @@ import (
 	"time"
 
 	"go.etcd.io/etcd/clientv3"
-	"go.etcd.io/etcd/clientv3/naming"
+	"go.etcd.io/etcd/clientv3/naming/endpoints"
 	"go.etcd.io/etcd/integration"
 	"go.etcd.io/etcd/pkg/testutil"
-
-	gnaming "google.golang.org/grpc/naming"
 )
 
 func TestRegister(t *testing.T) {
@@ -35,26 +33,16 @@ func TestRegister(t *testing.T) {
 	paddr := clus.Members[0].GRPCAddr()
 
 	testPrefix := "test-name"
-	wa := createWatcher(t, cli, testPrefix)
-	ups, err := wa.Next()
-	if err != nil {
-		t.Fatal(err)
-	}
-	if len(ups) != 0 {
-		t.Fatalf("len(ups) expected 0, got %d (%v)", len(ups), ups)
-	}
+	wa := mustCreateWatcher(t, cli, testPrefix)
 
 	donec := Register(cli, testPrefix, paddr, 5)
 
-	ups, err = wa.Next()
-	if err != nil {
-		t.Fatal(err)
-	}
+	ups := <-wa
 	if len(ups) != 1 {
 		t.Fatalf("len(ups) expected 1, got %d (%v)", len(ups), ups)
 	}
-	if ups[0].Addr != paddr {
-		t.Fatalf("ups[0].Addr expected %q, got %q", paddr, ups[0].Addr)
+	if ups[0].Endpoint.Addr != paddr {
+		t.Fatalf("ups[0].Addr expected %q, got %q", paddr, ups[0].Endpoint.Addr)
 	}
 
 	cli.Close()
@@ -66,11 +54,14 @@ func TestRegister(t *testing.T) {
 	}
 }
 
-func createWatcher(t *testing.T, c *clientv3.Client, prefix string) gnaming.Watcher {
-	gr := &naming.GRPCResolver{Client: c}
-	watcher, err := gr.Resolve(prefix)
+func mustCreateWatcher(t *testing.T, c *clientv3.Client, prefix string) endpoints.WatchChannel {
+	em, err := endpoints.NewManager(c, prefix)
+	if err != nil {
+		t.Fatalf("failed to create endpoints.Manager: %v", err)
+	}
+	wc, err := em.NewWatchChannel(c.Ctx())
 	if err != nil {
 		t.Fatalf("failed to resolve %q (%v)", prefix, err)
 	}
-	return watcher
+	return wc
 }
